/*!
* @file SdkCrypt.cpp
* 
* @brief This file defines SdkCrypt class to encrypt, decrypt stream, create key, etc.
* 
* Copyright (C) 2011, LZT Corporation.
* 
* @author Li Hong
* @date 2011/05/12
*/

#include "stdafx.h"
#include "SdkCrypt.h"

USING_NAMESPACE_COMMON

#define ENCRYPT_ALGORITHM       CALG_AES_256    // The encrypt algorithm.
#define ENCRYPT_PROVIDER_TYPE   PROV_RSA_AES    // The provider type.


// The data of the inner key
static const BYTE g_szInnerCryptKeyData[] =
{
    0x01, 0x02, 0x00, 0x00, 0x0E, 0x66, 0x00, 0x00,
    0x00, 0xA4, 0x00, 0x00, 0x40, 0x76, 0xAB, 0xB0,
    0x02, 0xB3, 0x94, 0x1A, 0xF1, 0x87, 0x63, 0xEE,
    0xE8, 0x19, 0x13, 0x64, 0xE8, 0xE8, 0xFE, 0x21,
    0x0D, 0xF1, 0xAD, 0x30, 0xCD, 0x8A, 0xD8, 0xB1,
    0x5F, 0xE1, 0x80, 0xBB, 0xBC, 0x39, 0x66, 0xCF,
    0xE4, 0x78, 0x43, 0x2C, 0xB8, 0xEB, 0x07, 0x2A,
    0x02, 0x84, 0x28, 0xF5, 0xC9, 0xB6, 0xB8, 0x0B,
    0xB2, 0xCD, 0x01, 0xB9, 0xF5, 0xB4, 0x61, 0x63,
    0x26, 0x76, 0x12, 0x31, 0x10, 0x61, 0xDD, 0xB0,
    0xA7, 0x3D, 0xE2, 0xDF, 0xB9, 0x25, 0x02, 0x6E,
    0xCB, 0x5D, 0xAF, 0x98, 0xC1, 0xD7, 0x4E, 0x9D,
    0x07, 0xAF, 0xB6, 0x48, 0x5A, 0xDB, 0x1F, 0xA9,
    0x29, 0xC1, 0xFC, 0x74, 0x42, 0x5C, 0x5C, 0x2C,
    0xD6, 0x25, 0x73, 0x1F, 0x0F, 0xDC, 0xA9, 0x3F,
    0xAF, 0xC5, 0x0C, 0xC1, 0x2F, 0x46, 0xD4, 0xAB,
    0x16, 0x16, 0xE4, 0xFC, 0x62, 0x42, 0x62, 0x9B,
    0xE4, 0xDC, 0x60, 0x70, 
};


// The data of the key which exchange inner key
static const BYTE g_szInnerXchgCryptKeyData[] = 
{
    0x07, 0x02, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x00,
    0x52, 0x53, 0x41, 0x32, 0x00, 0x04, 0x00, 0x00,
    0x01, 0x00, 0x01, 0x00, 0xEF, 0x4E, 0x67, 0xB8,
    0x5A, 0x25, 0x9F, 0xB8, 0x56, 0x0C, 0x0E, 0x21,
    0xA4, 0xEA, 0xF1, 0x27, 0xE5, 0x98, 0x77, 0xD5,
    0x65, 0xE7, 0x1B, 0x4A, 0x6D, 0x72, 0x23, 0xF9,
    0xFB, 0x77, 0xE7, 0xF3, 0xB0, 0xD3, 0xAA, 0xF9,
    0x70, 0xE4, 0xB2, 0x68, 0x5F, 0xAD, 0xEF, 0xA7,
    0x7A, 0xCB, 0xEF, 0xB7, 0x85, 0x74, 0x94, 0x6E,
    0xCF, 0xD4, 0x61, 0x7C, 0xF4, 0x09, 0x13, 0xED,
    0x53, 0xCF, 0x97, 0x50, 0x1B, 0xFE, 0xDD, 0x8D,
    0x0F, 0xF3, 0xEA, 0xD6, 0xFA, 0xC7, 0x2E, 0x40,
    0x36, 0x7E, 0x19, 0xF0, 0x2B, 0xB8, 0x18, 0x9E,
    0x8D, 0x14, 0x0A, 0x73, 0x77, 0x5C, 0xE8, 0xEA,
    0x30, 0xD8, 0x8C, 0x78, 0x6F, 0xA6, 0x6D, 0xE0,
    0x31, 0x9D, 0x0A, 0xD3, 0x17, 0x0D, 0xD4, 0x32,
    0x77, 0x3F, 0x71, 0x66, 0x9E, 0x28, 0x6F, 0x26,
    0x97, 0x07, 0x57, 0xF7, 0x6B, 0x53, 0x26, 0x9B,
    0x90, 0x4E, 0x10, 0xC4, 0x0B, 0x1D, 0x45, 0xE3,
    0x8C, 0x87, 0x96, 0x4E, 0x01, 0x0F, 0xDE, 0x6F,
    0x4E, 0xC1, 0x7C, 0xB0, 0x48, 0x96, 0xAC, 0x13,
    0x5C, 0x5B, 0xD8, 0x8C, 0x13, 0x6F, 0xE1, 0x44,
    0x29, 0x97, 0x9E, 0x10, 0xF0, 0x4D, 0x67, 0x9E,
    0xE9, 0x97, 0xE7, 0x62, 0xCC, 0x83, 0xAC, 0xE5,
    0xA0, 0x6D, 0x19, 0xAB, 0x06, 0x85, 0xBF, 0xD8,
    0x89, 0xD7, 0x87, 0xB8, 0x93, 0xB0, 0x33, 0x05,
    0xEE, 0xD8, 0x28, 0xE6, 0x2D, 0x1C, 0xBC, 0xE6,
    0xE6, 0xB6, 0x73, 0xB9, 0x5D, 0xB5, 0xBB, 0xE9,
    0x55, 0x9E, 0x47, 0x0E, 0xE3, 0x30, 0x52, 0xA7,
    0xB1, 0x34, 0x8B, 0x77, 0xE6, 0x6F, 0x67, 0xD6,
    0x34, 0xC8, 0x87, 0xD6, 0xA3, 0x99, 0x9B, 0x46,
    0x38, 0x9A, 0x13, 0x5A, 0x1E, 0x1C, 0xC2, 0x2D,
    0x24, 0xCC, 0x14, 0x22, 0x77, 0xD0, 0x9E, 0x75,
    0x0A, 0x34, 0xEF, 0xA2, 0x35, 0x9A, 0x88, 0xFB,
    0x77, 0x7D, 0x13, 0xDA, 0x15, 0x80, 0xC5, 0xB8,
    0x2D, 0xA2, 0x7A, 0x5C, 0xF9, 0x71, 0xAC, 0x87,
    0xEE, 0x57, 0xFB, 0xD2, 0xA7, 0xAE, 0xF1, 0x7B,
    0x26, 0xC9, 0xB7, 0x68, 0xB5, 0xC4, 0xA0, 0xA6,
    0x04, 0x4B, 0xEF, 0x77, 0xB4, 0xBC, 0x33, 0xFA,
    0x27, 0x68, 0xC3, 0x7E, 0xFD, 0x50, 0xDC, 0x73,
    0x83, 0x40, 0x7F, 0x7E, 0xC8, 0x0F, 0xDD, 0xA0,
    0x83, 0xBF, 0x35, 0x54, 0x41, 0xF3, 0x43, 0x59,
    0x56, 0xDD, 0x60, 0x79, 0xF5, 0x57, 0x27, 0x0B,
    0xE1, 0xD1, 0xB2, 0x48, 0x18, 0x8E, 0xA1, 0xC1,
    0xF3, 0x4C, 0x8D, 0x87, 0x1E, 0xFD, 0x46, 0xAD,
    0x79, 0xBA, 0x50, 0xA4, 0x1F, 0x78, 0x55, 0xAF,
    0xAA, 0xB5, 0x95, 0x40, 0x7F, 0x59, 0x84, 0xB6,
    0x37, 0x81, 0x13, 0x6F, 0x0F, 0x2D, 0x8B, 0xBF,
    0x07, 0xAF, 0x45, 0x40, 0xB8, 0xDB, 0xB2, 0x30,
    0x52, 0x79, 0xE4, 0xBA, 0xF2, 0x37, 0xD9, 0xC5,
    0x17, 0x9C, 0x7B, 0xBB, 0xF4, 0x4D, 0xBB, 0xBA,
    0x67, 0xE4, 0xE0, 0xB8, 0x8E, 0x35, 0x07, 0x35,
    0x85, 0x99, 0xE1, 0x3A, 0x47, 0xE3, 0xCB, 0xF9,
    0xAD, 0x5F, 0x4C, 0x46, 0xBE, 0x35, 0x09, 0xD2,
    0xC2, 0x29, 0x70, 0xF7, 0x43, 0x49, 0xC6, 0xA2,
    0x05, 0x1E, 0xAD, 0x47, 0x11, 0xD3, 0xAA, 0x2D,
    0x90, 0x8F, 0xAA, 0xFB, 0xE8, 0x7F, 0x7C, 0xC3,
    0x9E, 0xDB, 0x6A, 0x7A, 0x72, 0x24, 0x66, 0x66,
    0xC0, 0xAE, 0xC5, 0x41, 0xE1, 0x07, 0x1B, 0xB4,
    0xFA, 0xDC, 0x89, 0xFA, 0x48, 0x1E, 0x92, 0x78,
    0x37, 0x31, 0xF6, 0xE0, 0x70, 0x71, 0x53, 0xD0,
    0x10, 0xFA, 0xA7, 0x02, 0xF3, 0xA7, 0x6B, 0x6B,
    0xA3, 0x78, 0x25, 0x0C, 0x66, 0xB7, 0x31, 0xB2,
    0xA9, 0xAE, 0x34, 0xC2, 0x00, 0x69, 0x07, 0x7C,
    0x06, 0x85, 0x06, 0x01, 0x3F, 0x65, 0x9F, 0xD9,
    0x69, 0xF0, 0xBE, 0x9D, 0x77, 0x96, 0xCA, 0x15,
    0x48, 0xBE, 0xEE, 0xD9, 0xAC, 0xD5, 0xE4, 0x0E,
    0x4D, 0xC6, 0x2A, 0xF9, 0x85, 0x07, 0x71, 0x46,
    0x7C, 0xC4, 0x24, 0x68, 0x6C, 0x0D, 0x62, 0x9F,
    0xD9, 0xDF, 0x7D, 0xA5, 0x18, 0x90, 0x79, 0x6E,
    0x67, 0x8A, 0x16, 0x8D, 0xB5, 0xBC, 0x11, 0x1B,
    0x5C, 0xE6, 0xA7, 0x71, 0x84, 0x8C, 0x37, 0x48,
    0x85, 0xF2, 0x84, 0x6A, 0x2E, 0x0C, 0x41, 0x0D,
    0x7C, 0xA2, 0x97, 0x01, 0x5B, 0x3D, 0xF6, 0xFE,
    0x28, 0xF7, 0x9F, 0x76, 
};


//////////////////////////////////////////////////////////////////////////

SdkCrypt::SdkCrypt() : m_hCryptProvider(NULL),
                       m_hCryptKey(NULL)
{
    ZeroMemory(&m_keyBlob,     sizeof(CRYPTKEYBLOBINFO));
    ZeroMemory(&m_xchgKeyBlob, sizeof(CRYPTKEYBLOBINFO));

    // Copy global data to key blob buffer.
    DWORD dwcbCount = 0;
    dwcbCount = ARRAYSIZE(g_szInnerCryptKeyData);
    if (dwcbCount > 0)
    {
        m_keyBlob.dwKeyBlobLen = dwcbCount;
        m_keyBlob.pbKeyBlob = new BYTE[dwcbCount];
        memcpy_s(
            m_keyBlob.pbKeyBlob,
            dwcbCount, 
            g_szInnerCryptKeyData,
            dwcbCount);
    }

    // Copy the global data to exchange key blob buffer.
    dwcbCount = ARRAYSIZE(g_szInnerXchgCryptKeyData);
    if (dwcbCount > 0)
    {
        m_xchgKeyBlob.dwKeyBlobLen = dwcbCount;
        m_xchgKeyBlob.pbKeyBlob = new BYTE[dwcbCount];
        memcpy_s(
            m_xchgKeyBlob.pbKeyBlob,
            dwcbCount,
            g_szInnerXchgCryptKeyData,
            dwcbCount);
    }
}

//////////////////////////////////////////////////////////////////////////

SdkCrypt::SdkCrypt(IN SdkCryptKey *pCryptKey) : m_hCryptProvider(NULL),
                                                m_hCryptKey(NULL)
{
    ZeroMemory(&m_keyBlob,     sizeof(CRYPTKEYBLOBINFO));
    ZeroMemory(&m_xchgKeyBlob, sizeof(CRYPTKEYBLOBINFO));

    if (NULL != pCryptKey)
    {
        CRYPTKEYBLOBINFO keyBlob     = pCryptKey->GetKeyBlob();
        CRYPTKEYBLOBINFO xchgKeyBlob = pCryptKey->GetExchKeyBlob();

        DWORD dwcbCount = 0;
        dwcbCount = keyBlob.dwKeyBlobLen;
        if (dwcbCount > 0 && NULL != keyBlob.pbKeyBlob)
        {
            m_keyBlob.dwKeyBlobLen = dwcbCount;
            m_keyBlob.pbKeyBlob = new BYTE[dwcbCount];
            memcpy_s(m_keyBlob.pbKeyBlob, dwcbCount, keyBlob.pbKeyBlob, dwcbCount);
        }

        dwcbCount = xchgKeyBlob.dwKeyBlobLen;
        if (dwcbCount > 0 && NULL != xchgKeyBlob.pbKeyBlob)
        {
            m_xchgKeyBlob.dwKeyBlobLen = dwcbCount;
            m_xchgKeyBlob.pbKeyBlob = new BYTE[dwcbCount];
            memcpy_s(m_xchgKeyBlob.pbKeyBlob, dwcbCount, xchgKeyBlob.pbKeyBlob, dwcbCount);
        }
    }
}

//////////////////////////////////////////////////////////////////////////

SdkCrypt::~SdkCrypt()
{
    ::CryptDestroyKey(m_hCryptKey);
    ::CryptReleaseContext(m_hCryptProvider, 0);

    SAFE_DELETE_ARRAY(m_keyBlob.pbKeyBlob);
    SAFE_DELETE_ARRAY(m_xchgKeyBlob.pbKeyBlob);
}

//////////////////////////////////////////////////////////////////////////

CRYPT_RESULT SdkCrypt::InitializeScene()
{
    CRYPT_RESULT lResult = CRYPT_ERROR_FAIL;
    BOOL isOK = TRUE;

    if (NULL == m_hCryptProvider)
    {
        // Acquires the key container, CSP.
        isOK = CryptAcquireContext(
            &m_hCryptProvider,          // The outer handle to CSP.
            NULL,                       // The default key container name.
            NULL,                       // The default provider name.
            ENCRYPT_PROVIDER_TYPE,      // The cryptographic provider type.
            CRYPT_VERIFYCONTEXT);       // Usually set to zero.
    }

    // If succeeds to create CSP.
    if ( isOK )
    {
        // Transfers a cryptographic key from the key blob data.
        isOK = CryptImportKey(
            m_hCryptProvider,       // The handle to CSP.
            m_keyBlob.pbKeyBlob,    // The key blob data.
            m_keyBlob.dwKeyBlobLen, // The blob data size.
            NULL,                   // No public key.
            0,                      // Zero.
            &m_hCryptKey);          // The outer cryptographic key.

        // If fails to transfer cryptographic key.
        if ( !isOK )
        {
            HCRYPTKEY hxchgKey = (HCRYPTKEY)NULL;

            isOK = CryptImportKey(
                m_hCryptProvider,
                m_xchgKeyBlob.pbKeyBlob,
                m_xchgKeyBlob.dwKeyBlobLen,
                NULL,
                CRYPT_EXPORTABLE,
                &hxchgKey);
            // Succeeds to get exportable exchange key.
            if ( isOK )
            {
                isOK = CryptImportKey(
                    m_hCryptProvider,       // The handle to CSP.
                    m_keyBlob.pbKeyBlob,    // The key blob data.
                    m_keyBlob.dwKeyBlobLen, // The blob data size.
                    hxchgKey,               // The exchange key.
                    0,                      // Zero.
                    &m_hCryptKey);          // The outer cryptographic key.
            }

            CryptDestroyKey(hxchgKey);
        }
    }

    lResult = isOK ? CRYPT_ERROR_SUCCEED : CRYPT_ERROR_FAIL;

    return lResult;
}

//////////////////////////////////////////////////////////////////////////

CRYPT_RESULT SdkCrypt::CreateCryptKey(OUT SdkCryptKey **ppCryptKey)
{
    if (NULL == ppCryptKey)
    {
        return CRYPT_ERROR_FAIL;
    }

    CRYPT_RESULT lResult = CRYPT_ERROR_FAIL;

    if (NULL == m_hCryptProvider)
    {
        // Acquires the key container, CSP.
        CryptAcquireContext(
            &m_hCryptProvider,          // The outer handle to CSP.
            NULL,                       // The default key container name.
            NULL,                       // The default provider name.
            ENCRYPT_PROVIDER_TYPE,      // The cryptographic provider type.
            CRYPT_VERIFYCONTEXT);       // Usually set to zero.
    }

    if (NULL != m_hCryptProvider)
    {
        // First destroy the key.
        if (NULL != m_hCryptKey)
        {
            CryptDestroyKey(m_hCryptKey);
            m_hCryptKey = NULL;
        }

        // Generates a random cryptographic session key or a public/private key pair
        // for use with the cryptographic service provider (CSP).
        BOOL isOK = CryptGenKey(
            m_hCryptProvider,       // The handle to CSP.
            ENCRYPT_ALGORITHM,      // The cryptographic algorithm.
            CRYPT_EXPORTABLE,       // The key can be exported.
            &m_hCryptKey);          // The outer key.

        lResult = isOK ? CRYPT_ERROR_SUCCEED : CRYPT_ERROR_FAIL;
    }

    if (CRYPT_ERROR_SUCCEED == lResult)
    {
        (*ppCryptKey) = new SdkCryptKey();
        BOOL isOK = (*ppCryptKey)->Initialize(m_hCryptProvider, m_hCryptKey, TRUE);

        lResult = isOK ? CRYPT_ERROR_SUCCEED : CRYPT_ERROR_FAIL;
    }

    return lResult;
}

//////////////////////////////////////////////////////////////////////////

CRYPT_RESULT SdkCrypt::EncryptStream(IN OUT PBYTE pbData, DWORD dwDataSize, BOOL isFinal)
{
    CRYPT_RESULT lResult = CRYPT_ERROR_FAIL;

    DWORD dwRealDataLen = 0;
    if (isFinal)
    {
        dwRealDataLen = dwDataSize - ENCRYPT_LAST_PART_VERIFYDATA_SIZE;
    }
    else
    {
        dwRealDataLen = dwDataSize;
    }

    BOOL isOK = CryptEncrypt(
        m_hCryptKey,            // The key handle.
        NULL,                   // Not hash key.
        isFinal,                // Is last section.
        0,                      // dwFlags
        pbData,                 // Data buffer to be encrypted.
        &dwRealDataLen,         // The block size to be encrypted.
        dwDataSize);            // The buffer size.

    lResult = isOK ? CRYPT_ERROR_SUCCEED : CRYPT_ERROR_FAIL;

    return lResult;
}

//////////////////////////////////////////////////////////////////////////

CRYPT_RESULT SdkCrypt::DecryptStream(IN OUT PBYTE pbData, DWORD dwDataSize, BOOL isFinal)
{
    BOOL isOK = CryptDecrypt(m_hCryptKey, NULL, isFinal, 0, pbData, &dwDataSize);

    return (isOK ? CRYPT_ERROR_SUCCEED : CRYPT_ERROR_FAIL);
}

//////////////////////////////////////////////////////////////////////////

CRYPT_RESULT SdkCrypt::GetCheckedCbSize(IN OUT DWORD *pdwCbSize, BOOL isFinal)
{
    CRYPT_RESULT lResult = CRYPT_ERROR_SUCCEED;

    if (NULL != pdwCbSize)
    {
        // Make the dwCbSize is the multiply of ENCRYPT_BLOCK_SIZE.
        DWORD dwCbSize = (*pdwCbSize);
        if (0 == dwCbSize)
        {
            dwCbSize = ENCRYPT_BLOCK_SIZE;
        }
        else
        {
            DWORD dwMod = (dwCbSize % ENCRYPT_BLOCK_SIZE);
            if (0 != dwMod)
            {
                dwCbSize += ENCRYPT_BLOCK_SIZE - dwMod;
            }
        }

        if (isFinal)
        {
            dwCbSize += ENCRYPT_LAST_PART_VERIFYDATA_SIZE;
        }

        // Set the output value.
        (*pdwCbSize) = dwCbSize;
    }

    return lResult;
}
